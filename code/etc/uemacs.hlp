=>                   nuEmacs GGR4.154 Help Index     (30 March 2020)
.. The very basics
.. Cursor movement
.. File commands
.. Miscellaneous character commands
.. Buffer mode commands
.. Keys and commands
.. Deleting and inserting
.. Formatting
.. Window commands
.. Buffer commands
.. Searching and replacing
.. Search modes
.. Accessing the operating system
.. Macro commands
.. Miscellaneous
.. System variables
.. Functions
.. Name completion
.. MACRO functions and user variables
-------------------------------------------------------------------------------
=>                      THE VERY BASICS
Notations: ^X means <Ctrl> and X. The <Meta> key is <Esc> on most systems.
Exiting:   ^G aborts almost any operation. ^X ^C will get you out of uEmacs.

A BUFFER is a named area containing a FILE being edited. Many buffers may
be active at once. Many WINDOWS may be active at once on the screen. All
windows may show different parts of the same buffer, or each may display a
different one.
-------------------------------------------------------------------------------
=>                      CURSOR MOVEMENT
Backward character ....      ^B         Forward character .....      ^F
Previous word ......... Meta  B         Next word ............. Meta  F
Beginning of line .....      ^A         End of line ...........      ^E
Previous line ......... ^P or ^Z        Next line .............      ^N
Previous paragraph .... Meta  P         Next paragraph ........ Meta  N
Previous page ......... Meta  V         Next page .............      ^V
Beginning of file ..... Meta  <         End of file ........... Meta  >
-------------------------------------------------------------------------------
=>                      FILE COMMANDS
Find file .............   ^X ^F         Quick exit ............ Meta  Z
View file .............   ^X ^V         Exit emacs ............   ^X ^C
Insert file ...........   ^X ^I
Change file name ......   ^X  N         Filter buffer .........   ^X  #
Save file .............   ^X ^S (^X S)
Read file .............   ^X ^R
Write file ............   ^X ^W         Execute file .......... Meta ^X

Opening a directory (rather than a file) will present you with a list of
files which you may browse and open. When viewing this list (which will
be in a buffer named //directory):

Typing      Result
 d or o     Dive into/Open entry on current line.
  or Return
 v          View entry on current line.
 u          Up to parent.
 a          Switch to sort-by-name mode if in time mode.
            If already in name mode, toggle between A->z and z->A sorting.
 t          Switch to sort-by-time mode if in name mode.
            If already in time mode, toggle between newest and oldest first.
 h          Toggle the display of hidden (dot) files.
 r          Refresh the current view in the current mode.

The current mode is remembered when you move through the directory tree.
-------------------------------------------------------------------------------
=>                      MISCELLANEOUS CHARACTER COMMANDS
Newline ...............      ^M         Transpose characters ..      ^T
Newline and indent ....      ^J         Trim line .............   ^X ^T
Open line .............      ^O
Handle tab ............      ^I         Quote character .......   ^X  Q
Goto line ............. Meta  G         Abort command .........      ^G
Goto matching fence ... Meta ^F
-------------------------------------------------------------------------------
=>                      BUFFER MODE COMMANDS
Add mode ..............   ^X  M         Add global mode	....... Meta  M
Delete mode ...........   ^X ^M         Delete global mode .... Meta ^M
Toggle mode ...........   ^X  T         Toggle global mode .... Meta  T

Various buffer modes exist.
toggle-lmode (^XT) will (un)set the mode in the current buffer while
toggle-gmode (Meta T) will (un)set the global mode (which means that it
will be turned on/off in new buffers *not* that it gets turned on in all
current buffers!).

F   autodos     Check a file for having DOS line endings when reading
                it into a buffer and set the DOS mode if it does.
                This is actually a GLOBAL-ONLY mode.
H   hscroll     Horizontal scrolling.
W   wrap        Auto-wrap text at fill column.
C   cmode       Help with formatting C code ({} matching, indent on newline)
P   phon        Use the current Phonetic Translation table.
E   exact       Use Exact mode when searching (see below).
V   view        Use view mode (no editing allowed).
O   over        Overwrite, not insert, when typing.
M   magic       Magic mode (see below).
Y   crypt       Use an encrypted mode for files.
A   asave       Autosave the file periodically.
Q   equiv       Use equivalence mode when searching (see below).
D   dos         Write out file with DOS line endings.

In VIEW mode the following ASCII keys are active:
Space or Return     Go forward one page
b B                 Go back one page
-------------------------------------------------------------------------------
=>                      KEYS AND COMMANDS
Bind to key ........... Meta  K         Help ..................   ^X  ?
Unbind key ............ Meta ^K         Apropos ............... Meta  A
Describe key .......... Meta  ?         Abort command .........      ^G
Describe bindings ..... not bound
Meta prefix ...........      Esc    ::  Although meta-prefix can be bound to
Cntlx prefix ..........      ^X     ::  some other key, no other command can
Execute named command . Meta  X     ::  be bound to Esc.

You can specify a numeric argument to a command by
    Meta nnn
before the command, when nnn is a number (negative ones are allowed).
For many comands this will beb taken as "run it nnn times". For a few it
has a special meaning, e.g. for write-message, 2 means "write to stdout,
not the message line (useful for debugging) and for goto-line it
specifies which line to go to.

You can repeat the previous command with ^C (reexecute).
For a user procedure (macro) this will repeat the whole macro.
This can take a numeric prefix and will repeat that number of times.
If you repeat a command that itself had a numeric prefix that numeric
prefix is used again.

So:
    Meta 2 Meta c will Capinitalize the next 2 words.
    Meta 3 ^C would then Capinitalize the next 6 words (3x2).
However:
    Meta 20 Meta g would take you to line 20
    Meta 3 ^C would then take you to line 20 3 times (not line 60)!

reexecute leaves the "previous command" and any numeric argument 
unchanged. So:
    Meta 2 Meta c will Capinitalize the next 2 words.
    Meta 3 ^C would then Capinitalize the next 6 words (3x2).
    Meta 3 ^C would then Capinitalize the next 6 words (3x2) *NOT* the
    next 18 (3x3x2)

-------------------------------------------------------------------------------
=>                      DELETING AND INSERTING
Delete previous character    ^H         Delete next character .      ^D
Delete previous word .. Meta ^H         Delete next word ...... Meta  D
Leave one whitespace .. Meta space      Delete all whitespace . Meta  \
Kill to end of line ...      ^K         Set mark ..............      ^@
Kill region ...........      ^W         Yank ..................      ^Y
Kill paragraph ........ Meta ^W         Exchange point and mark   ^X ^X
Delete blank lines ....   ^X ^O     ::  A region is defined as the area between
Copy region ........... Meta  W     ::  the mark and the current position.

    There are two yank-styles, "old" and "gnu". The default is "old".
    To change this use:
         set $yankmode gnu
    in your personal uemacs.rc file.

    old:
        ctl-Y (yank) inserts the last-killed string.
        Esc<n> ctl-Y inserts <n> copies.
        Esc-Y (yank_replace):
            if the last command was a yank this replaces that region
            with the previous kill-ring buffer entry, otherwise it
            just inserts the last-killed string (== ctl-Y).
        Esc<n> Esc-Y rotates the kill-buffers by <n> before doing the
        replace.

    gnu:
        ctl-Y (yank) inserts the last-killed string.
        Esc<n> ctl-Y rotates the kill-ring buffers by <n> then inserts
        the current "top" kill-ring string.
        Esc-Y (yank_replace):
            if the last command was not a yank it complains and does
            nothing
            otherwise it replaces that region with the previous
            kill-ring buffer entry
        Esc<n> Esc-Y rotates the kill-buffers by <n> before doing the
        replace.

Yank last minibuffer .. Meta ^Y  (10 in a ring, numeric arg allowed)
-------------------------------------------------------------------------------
=>                      FORMATTING
Case word upper ....... Meta  U         Case word lower ....... Meta  L
Case region upper .....   ^X ^U         Case region lower .....   ^X ^L
Case word capitalize .. Meta  C         Trim line .............   ^X ^T
                                        Detab line ............   ^X ^D
Set fill column .......   ^X  F         Entab line ............   ^X ^E
Fill paragraph ........ Meta  Q
Justify paragraph ..... Meta  J
Left and right Justify  Meta ^J         Narrow to region ......   ^X  <
Make list from region   Meta  /         Widen from region .....   ^X  >
Number list from region   ^X  /
-------------------------------------------------------------------------------
=>                      WINDOW COMMANDS
Split current window ..   ^X  2         Next window ...........   ^X  O
Delete other windows ..   ^X  1         Previous window .......   ^X  P
Delete window .........   ^X  0         Scroll next up ........ Meta ^Z
Grow window ...........   ^X  Z         Scroll next down ...... Meta ^V
Shrink window .........   ^X ^Z         Resize window .........   ^X  W
Move window up ........   ^X ^P         Save window ........... not bound
Move window down ......   ^X ^N         Restore window ........ not bound
-------------------------------------------------------------------------------
=>                      BUFFER COMMANDS
Next buffer ...........   ^X  X         Buffer position .......   ^X  =
Select buffer .........   ^X  B         Unmark buffer ......... Meta  ~
List buffers ..........   ^X ^B
Delete buffer .........   ^X  K         Write message ......... not bound
Name buffer ........... Meta ^N         Clear message line .... not bound
Filter buffer .........   ^X  #         Execute buffer ........ not bound
-------------------------------------------------------------------------------
=>                      SEARCHING AND REPLACING
Search forward ........ Meta  S     ::  End string with <CR>.
Incremental search .... Meta ^I     ::  stop Meta, cancel ^G, back ^R, fwd ^S
Search reverse ........      ^R
Reverse incremental search  ^X R
Replace string ........ Meta  R
Query replace string .. Meta  %     ::  Yes/no Y/N, replace rest !, cancel ^G.
Unset default replace string .. Meta ^D

    When at the search (or replace) prompt you can move through the last
    10 strings using ^I (tab) for the previous string and Esc^I for the
    next one.
    The currently selected default string can be inserted into the
    current search/replace buffer, at the current cursor point, with ^X^I.

-------------------------------------------------------------------------------
=>                      SEARCH MODES
There are 3 modes which affect how searching works.

EXACT   This means that the search will look for the string in the case
        that you entered it in.
MAGIC   Activates various regular expression features. See below.
EQUIV   Has an effect in Magic mode only. Compare characters that are
        equivalent (so, e.g.,  e + acute accent (two Unicode points U+65
        and U+301)) matches the single Unicode point e-with-acute (U+e9).
        This uses the NFKC method by default, but can be switched to
        NFC, NFD or NFKD by setting $equiv_type.

MAGIC mode details.
    This enables the following regular expression features when
    searching. It works for search-forward (Meta S), search-reverse
    (Meta R), replace-string (^R) and query-replace-string (Meta %).
    It does not work in incremental-search (Meta ^I).

^ and $
    These match the start and end of a line respectively.
    They can *only* be placed at the start (^) or end ($) of the search
    string.
    The difference between these and \n is that these are zero-width
    matches. So a search for "end$" will find "end" at the end of a
    line, set the position to be the end of that line and the matched
    string will be "end" (3 characters). However, a search for "end\n"
    will find "end" at the end of a line but include the newline in the
    match so will set the position to be the beginning of the next line
    and the matched string will be "end\n" (4 characters).

(...)
    Denotes a group. These can be used in replacement strings by using
    ${n} for the contents that matched the corresponding group.
    Groups are counted from 1 based on their opening "(".
    Groups may be nested.
    The entire match is found in ${0}.
    The value of ${n} for any group that didn't take place in the final
    match is "", the empty string.
    There is a &grp function, so you can get the text of a matched group
    after a search in a script.  It takes a numeric arg for the group
    number you want.

Repeats
    You can use *, ?, + and {m,n} for repeats of the preceding entity
    (character, character class or group). This will force the entity
    to match between m and n times.
    * == {0,∞}, + == {1,∞} and ? == {0,1}.
    By default these will match as much as possible (greedy) but
    appending ? to a repeat makes it a minimal repeat.
    If you use a repeat count on a group, only the last-matched contents
    are saved for ${n} use.

|
    You can use | to give choices for a match within a group.
    They are tried left-to-right.

[...]
    Denotes a character class.
    A character class is matched against a single grapheme and contains
    a list of possible options. If any option matches the class matches.
    It may contain characters, properties, \d, \s, \S, \w, \W and \k{}
    entries.
    You can specify a range of characters with, e.g., "a-e", which would
    match a, b, c, d, or e. There is no case-folding on ranges, as
    non-ASCII case-mapping doesn't fit well with ranges. If "-" is the
    first or last character in the [...] it is taken literally.
    If the first character after the opening [ is ] then it is taken
    literally. So you cannot have an empty class.
    If the first character after the opening [ is ^ then the result is
    negated.

\X
    Match any grapheme (including newline)

\d
    Match any numeric digit. (Actually a short-cut for \p{Nd}).
    \D matches any non-numeric digit.

\s
    Match any whitespace. \S matches any non-whitespace.

\n \r \f \t
    Match newline, carriage-return, form-feed and tab respectively.

\w
    Match any word character. \W matches any non-word character.

\p{Xx}
    Match the Unicode property of a character.
    e.g. \p{Lu} is Uppercase Letter, \p{Ll} is lowercase letter.
    uemacs lets you use \p{L} as any letter.
    \P{} inverts the result.
    Properties are *not* affected by the Exact setting.
    Properties are only tested against the base character of any
    grapheme containing combining characters.

\u{hhhh}
    Can be used to enter the Unicode point hhhh (in hex).

\k{n}
    Will match any grapheme with a base Unicode point of n, ignoring
    any combining characters.

\
    Take the next character literally, unless it is one of the special
    \-sequences described above.
    So \\ is a literal "\" and hence things like \\X become the literal
    string "\X".

-------------------------------------------------------------------------------
=>                      ACCESSING THE OPERATING SYSTEM
Quick exit ............ Meta  Z     ::  Write out all changed buffers and exit.
Exit emacs ............   ^X ^C     ::  Exit without automatic save.
I shell ...............   ^X  C     ::  Start a new command processor.
Shell command .........   ^X  !     ::  Execute one operating system command.
Pipe command ..........   ^X  @     ::  Pipe command results to a new buffer. *
Filter buffer .........   ^X  #     ::  Filter buffer through a program.      *
Execute program .......   ^X  $     ::  * Not under VMS.
-------------------------------------------------------------------------------
=>                      MACRO COMMANDS
Begin macro ...........   ^X  (
End macro .............   ^X  )
Execute macro .........   ^X  E         (replay keys)
Execute macro .........   ^X  V         (replay commands - experimental)
Store macro ........... not bound
Execute macro nn ...... not bound
Store procedure ....... not bound
Execute procedure ..... Meta ^E
Store pttable ......... not bound
Set pttable ........... not bound
Toggle ptmode ......... not bound
-------------------------------------------------------------------------------
=>                      MISCELLANEOUS
Universal argument ....      ^U         Set mark .............. Meta Space
Clear and redraw ......      ^L         Exchange point and mark   ^X ^X
Redraw display ........ Meta ^L
Execute named command . Meta  X         Insert string ......... not bound
Execute command line .. not bound       Overwrite string ...... not bound
Set encryption key .... Meta  E         Wrap word ............. not bound
Count words ........... Meta ^C         Update screen ......... not bound
-------------------------------------------------------------------------------
=>                      SYSTEM VARIABLES
Set ................... ^X A
Scrolling enabled ..... $scroll     ::  TRUE, FALSE, can only be unset
Scrolling movement .... $jump       ::  # lines, default 0, 0 = 1/2 page
Page overlap .......... $overlap    ::  # lines, default 0, 0 = 1/3 page

Others (ommtting system-use only ones)...

    $pagelen .............. number of lines used by editor
    $curcol ............... current column pos of cursor
    $curline .............. current line in file
    $flicker .............. flicker supression
    $curwidth ............. current screen width
    $cbufname ............. current buffer name
    $cfname ............... current file name
    $debug ................ macro debugging
    $status ............... returns the status of the last command
    $palette .............. current palette string
    $asave ................ # of chars between auto-saves
    $acount ............... # of chars until next auto-save
    $lastkey .............. last keyboard char struck
    $curchar .............. current character under the cursor
    $discmd ............... display commands on command line
    $version .............. current version number
    $progname ............. returns current prog name - "MicroEMACS"
    $seed ................. current random number seed
    $disinp ............... display command line input characters
    $wline ................ # of lines in current window
    $cwline ............... current screen line in window
    $target ............... target for line moves
    $search ............... search pattern (read-only)
    $replace .............. replacement pattern (read_only)
    $match ................ last matched magic pattern
    $kill ................. kill buffer (read only)
    $cmode ................ mode of current buffer
    $gmode ................ global modes
    $tpause ............... length to pause for paren matching
    $pending .............. type ahead pending flag
    $lwidth ............... width of current line
    $line ................. text of current line
    $gflags ............... global internal emacs flags
    $rval ................. child process return value
    $tab .................. tab 4 or 8
    $scroll ............... scroll enabled
    $inmb ................. In mini-buffer (read only)
    $fcol ................. first displayed column in curent window
    $hjump ................ horizontal screen jump size
    $hscroll .............. horizontal scrolling flag
    $yankmode ............. mode for yank (old/gnu)
    $autoclean ............ Age (days) at which dumped files are removed
    $regionlist_text ...... makelist_region() indent
    $regionlist_number .... numberlist_region() indent
    $autodos .............. Check for DOS on read-in?
    $showdir_tokskip ...... Tokens to skip in showdir
    $force_status ......... Actual status when forced to OK
    $equiv_type ........... Function to use for Equiv mode
                             (NFC, NFD, NFKD or NFKC [default])
    $showdir_opts ......... Start-up state (for user to set)
                             (A subset of "TRHFM" - default is "")

-------------------------------------------------------------------------------
=>                      FUNCTIONS
&neg, &abs, &add, &sub, &tim, &div, &mod ... Arithmetic
&equ, &les, &gre ........................... Arithmetic comparisons
&not, &and, &or ............................ Logical
&lef s len, &rig s pos, &mid s pos len ..... Substring
&cat, &len, &upp, &low, &asc, &chr, &esc ... Other string operations
&seq, &sle, &sgr ........................... String comparisons
&sin ....................................... String index
&exi, &fin, ................................ File operations
&ban, &bor, &bxo, &bno ..................... Bit operations
&ind, &tru, &gtk, &rnd, &env, &bin, &xla ... Miscellaneous
&arg n, &grp n .............................    "   "
-------------------------------------------------------------------------------
=>                        NAME COMPLETION

Name completion can be used in the prompts for various context-aware
commands. It is invoked by a <Tab>.
Matches are done against files, buffer names, user procedures, phonetic
translation tables, function names and uemacs environment/user variables.

If more than one possible completion exists they are displayed
in the minibuffer and the longest common part is retained for you to add
to. The minibuffer is an editable buffer line.

For file completion, shell expansion is handled and leading ".." dirs
are taken relative to the $PWD environment variable.
-------------------------------------------------------------------------------
=>                MACRO functions and user variables
eos-chars <string of characters>
    This defines which characters to treat as end of sentence ones so
    that they have an extra space appended when justifying paragraphs.
    The default is none, but the default uemacs.rc sets it to ".!?"

char-replace
    Allows you to define the on-screen representation of characters -
    useful for those oddities that display incorrectly in your terminal
    emulator.
    char-replace reset
        resets everything to no replace, replace-char 0xFFFD
    char-replace "repchar U+xxxx"
        sets the replace-char to U+xxxx
    char-replace "U+xxxx | U+xxxx-U+xxxx"
        sets the given character (range) to be replaced

store-procedure <proc-name>
    Store a user-defined set of macro commands with the given name
    (which can be a maximum of 14 characters in length).

buffer-to-key <proc-name> <key-spec>
    Bind the user-defined procedure <proc-name> to the given key.

store-pttable <ptt-name>
    from1  to1
    from2  to2
    ...
!endm
    Define a phonetic translation table.  When this is switched on any
    typing that results in the completion of from1 (from2, ...) will
    result in that text being replaced with to1 (to2, ...).

    The tables can contain these commands:
        caseset-on          [which is the default setting]
        caseset-capinit1
        caseset-capinitall
        caseset-lowinit1
        caseset-lowinitall
        caseset-off
    Each applies to all following replacement rules until the next
    caseset-* command or the end of the table is reached,
    For caseset-off the replaced text is treated verbatim and it will do
    a verbatim replacement on a match.
    For the other cases the replaced text is checked case-insensitively.
    For caseset-on it will force upper-case of the replacement on a
    match if the first character in the replaced string is uppercase.
    For caseset-cap* it will uppercase the first character of the string
    (capinit1) or all words (capinitall).  The caseset-low* are similar,
    but force lowercase if the first character of the replaced string is
    lowercase.

    They may also contain:
        display-code XX

    where XX is a 2-character code to display in the mode line when it
    is on, where is preceded by "P-", and defaults to the first two
    characters of the table name.

toggle-ptmode
    This turns pttable usage on and off.  Normally it just toggles the
    current state, but a positive argument will force it on and a
    negative one off. You must have a pttable defined (loaded).
    The ptmode state is per-buffer, but which pttable is active (if you
    have more then one defined) is global - so the same table applies to
    all buffers with the ptmode state on.
    It can be on in the mini-buffer, but needs to be activated in each
    minibuffer, as each one starts afresh.

set-pttable <ptt-name>
    Make <ptt-name> the currently-active pttable.

regionlist_text and regionlist_number
    These are uemacs environment variables that are used by the
    makelist-region and numberlist-region functions respectively to
    determine that label used on the first line of a paragraph or list
    (and hence defines the indent for the rest of the paragraph/list).
    regionlist_text is just a string, whereas regionlist_number is a
    printf format string that may contain AT MOST one numeric field
    descriptor.
    The default settings are " o " and " %2d. ".
