=>                   nuEmacs GGR4.145 Help Index     (11 December 2019)
.. The very basics
.. Cursor movement
.. File commands
.. Miscellaneous character commands
.. Mode commands
.. Keys and commands
.. Deleting and inserting
.. Formatting
.. Window commands
.. Buffer commands
.. Searching and replacing
.. Accessing the operating system
.. Macro commands
.. Miscellaneous
.. Functions
.. System variables
.. File name completion
.. MACRO functions and user variables
-------------------------------------------------------------------------------
=>                      THE VERY BASICS
Notations: ^X means <Ctrl> and X. The <Meta> key is <Esc> on most systems.
Exiting:   ^G aborts almost any operation. ^X ^C will get you out of uEmacs.

A BUFFER is a named area containing a FILE being edited. Many buffers may
be active at once. Many WINDOWS may be active at once on the screen. All
windows may show different parts of the same buffer, or each may display a
different one.
-------------------------------------------------------------------------------
=>                      CURSOR MOVEMENT
Backward character ....      ^B         Forward character .....      ^F
Previous word ......... Meta  B         Next word ............. Meta  F
Beginning of line .....      ^A         End of line ...........      ^E
Previous line .........  ^P or ^Z       Next line .............      ^N
Previous paragraph .... Meta  P         Next paragraph ........ Meta  N
Previous page ......... Meta  V         Next page .............      ^V
Beginning of file ..... Meta  <         End of file ........... Meta  >
-------------------------------------------------------------------------------
=>                      FILE COMMANDS
Find file .............   ^X ^F         Quick exit ............ Meta  Z
View file .............   ^X ^V         Exit emacs ............   ^X ^C
Insert file ...........   ^X ^I
Change file name ......   ^X  N         Filter buffer .........   ^X  #
Save file .............   ^X ^S
Read file .............   ^X ^R
Write file ............   ^X ^W         Execute file .......... not bound
-------------------------------------------------------------------------------
=>                      MISCELLANEOUS CHARACTER COMMANDS
Newline ...............      ^M         Transpose characters ..      ^T
Newline and indent ....      ^J         Trim line .............   ^X ^T
Open line .............      ^O
Handle tab ............      ^I         Quote character .......   ^X  Q
Goto line ............. Meta  G         Abort command .........      ^G
Goto matching fence ... Meta ^F
-------------------------------------------------------------------------------
=>                      MODE COMMANDS
Add mode ..............   ^X  M         Add global mode	....... Meta  M
Delete mode ...........   ^X ^M         Delete global mode .... Meta ^M
Toggle mode ...........   ^X  T         Toggle global mode .... Meta  T
OVER   :: Overwrite, don't insert       MAGIC  :: Match patterns in search
WRAP   :: Automatic carriage return     ^ $  Beginning and end of line
VIEW   :: View only, don't change       .    Any character   \c   Character c
CMODE  :: C program indenting           c*   Any number of character c
EXACT  :: Match case in search          [ ]  Character class
-------------------------------------------------------------------------------
=>                      KEYS AND COMMANDS
Bind to key ........... Meta  K         Help ..................   ^X  ?
Unbind key ............ Meta ^K         Apropos ............... Meta  A
Describe key .......... Meta  ?         Abort command .........      ^G
Describe bindings ..... not bound
Meta prefix ...........      Esc    ::  Although meta-prefix can be bound to
Cntlx prefix ..........      ^X     ::  some other key, no other command can
Execute named command . Meta  X     ::  be bound to Esc.
-------------------------------------------------------------------------------
=>                      DELETING AND INSERTING
Delete previous character    ^H         Delete next character .      ^D
Delete previous word .. Meta ^H         Delete next word ...... Meta  D
Leave on whitespace ... Meta space      Deleet all whitspace .. Meta  \
Kill to end of line ...      ^K         Set mark ..............      ^@
Kill region ...........      ^W         Yank ..................      ^Y
Kill paragraph ........ Meta ^W         Exchange point and mark   ^X ^X
Delete blank lines ....   ^X ^O     ::  A region is defined as the area between
Copy region ........... Meta  W     ::  the mark and the current position.

    There are two yank-styles, "old" and "gnu". The default is "old".
    To change this use:
         set $yankmode gnu
    in your personal uemacs.rc file.

    old:
        ctl-Y (yank) inserts the last-killed string.
        Esc<n> ctl-Y inserts <n> copies.
        Esc-Y (yank_replace):
            if the last command was a yank this replaces that region
            with the previous kill-ring buffer entry, otherwise it
            just inserts the last-killed string (== ctl-Y).
        Esc<n> Esc-Y rotates the kill-buffers by <n> before doing the
        replace.

    gnu:
        ctl-Y (yank) inserts the last-killed string.
        Esc<n> ctl-Y rotates the kill-ring buffers by <n> then inserts
        the current "top" kill-ring string.
        Esc-Y (yank_replace):
            if the last command was not a yank it complains and does
            nothing
            otherwise it replaces that region with the previous
            kill-ring buffer entry
        Esc<n> Esc-Y rotates the kill-buffers by <n> before doing the
        replace.
-------------------------------------------------------------------------------
=>                      FORMATTING
Case word upper ....... Meta  U         Case word lower ....... Meta  L
Case region upper .....   ^X ^U         Case region lower .....   ^X ^L
Case word capitalize .. Meta  C         Trim line .............   ^X ^T
                                        Detab line ............   ^X ^A
Set fill column .......   ^X  F         Entab line ............   ^X ^E
Fill paragraph ........ Meta  Q         Change screen size .... Meta ^D
Justify paragraph ..... Meta  J         Change screen width ... Meta ^T
Left and right Justify  Meta ^J         Narrow to region ......   ^X  <
Make list from region   Meta  /         Widen from region .....   ^X  >
Number list from region   ^X  /
-------------------------------------------------------------------------------
=>                      WINDOW COMMANDS
Split current window ..   ^X  2         Next window ...........   ^X  O
Delete other windows ..   ^X  1         Previous window .......   ^X  P
Delete window .........   ^X  0         Scroll next up ........ Meta ^Z
Grow window ...........   ^X  Z         Scroll next down ...... Meta ^V
Shrink window .........   ^X ^Z         Resize window .........   ^X  W
Move window up ........   ^X ^P         Save window ........... not bound
Move window down ......   ^X ^N         Restore window ........ not bound
-------------------------------------------------------------------------------
=>                      BUFFER COMMANDS
Next buffer ...........   ^X  X         Buffer position .......   ^X  =
Select buffer .........   ^X  B         Unmark buffer ......... Meta  ~
List buffers ..........   ^X ^B
Delete buffer .........   ^X  K         Write message ......... not bound
Name buffer ........... Meta ^N         Clear message line .... not bound
Filter buffer .........   ^X  #
Pipe command ..........   ^X  @         Execute buffer ........ not bound
-------------------------------------------------------------------------------
=>                      SEARCHING AND REPLACING
Search forward ........ Meta  S     ::  End string with Meta.
Incremental search ....   ^X  S     ::  Search next ^X, stop Meta, cancel ^G.
Search reverse ........      ^R
Reverse incremental search              Hunt forward ..........  Alt-S
.......................   ^X  R         Hunt backward .........  Alt-R
Replace string ........ Meta  R
Query replace string .. Meta  %     ::  Yes/no Y/N, replace rest !, cancel ^G.

    When at the search (or replace) prompt you can move back and
    forwards though the last 10 strings using ^XO (Next window) and ^XP
    (Previous window).  The current default string can be inserted into
    the real search buffer, at the current cursor point, with ^X^B (List
    buffers).
-------------------------------------------------------------------------------
=>                      ACCESSING THE OPERATING SYSTEM
Quick exit ............ Meta  Z     ::  Write out all changed buffers and exit.
Exit emacs ............   ^X ^C     ::  Exit without automatic save.
I shell ...............   ^X  C     ::  Start a new command processor.
Shell command .........   ^X  !     ::  Execute one operating system command.
Pipe command ..........   ^X  @     ::  Pipe command results to a new buffer. *
Filter buffer .........   ^X  #     ::  Filter buffer through a program.      *
Execute program .......   ^X  $     ::  * Not under VMS.
-------------------------------------------------------------------------------
=>                      MACRO COMMANDS
Begin macro ...........   ^X  (
End macro .............   ^X  )
Execute macro .........   ^X  E         (replay keys)
Execute macro .........   ^X  V         (replay commands - experimental)
Store macro ........... not bound
Execute macro nn ...... not bound
Store procedure ....... not bound
Execute procedure ..... Meta ^E
Store pttable ......... not bound
Set pttable ........... not bound
Toggle ptmode ......... not bound
-------------------------------------------------------------------------------
=>                      MISCELLANEOUS
Universal argument ....      ^U         Set mark .............. Meta Space
Clear and redraw ......      ^L         Exchange point and mark   ^X ^X
Redraw display ........ Meta ^L
Execute named command . Meta  X         Insert string ......... not bound
Execute command line .. not bound       Overwrite string ...... not bound
Set encryption key .... Meta  E         Wrap word ............. not bound
Count words ........... Meta ^C         Update screen ......... not bound
-------------------------------------------------------------------------------
=>                      SYSTEM VARIABLES
Set ................... Meta ^A         Current buffer name ... $cbufname
Tabulator (4, 8)....... $tab            Current file name ..... $cfname
Screen resolution ..... $sres       ::  NORMAL, CGA, EGA, VGA
Display commands ...... $discmd     ::  TRUE, FALSE
Scrolling enabled ..... $scroll     ::  TRUE, FALSE, can only be reset
Scrolling movement .... $jump       ::  # lines, default 0, 0 = 1/2 page
Page overlap .......... $overlap    ::  # lines, default 0, 0 = 1/3 page
-------------------------------------------------------------------------------
=>                      FUNCTIONS
&neg, &abs, &add, &sub, &tim, &div, &mod ... Arithmetic
&equ, &les, &gre ........................... Arithmetic comparisons
&not, &and, &or ............................ Logical
&lef s len, &rig s pos, &mid s pos len ..... Substring
&cat, &len, &upp, &low, &asc, &chr ......... Other string operations
&seq, &sle, &sgr ........................... String comparisons
&sin ....................................... String index
-------------------------------------------------------------------------------
=>                      FILE NAME COMPLETION

File name completion can be used with all file commands (find-file,
view-file, ...) but it works only under UNIX and MS-DOS. It is invoked
by a <Tab>. If more than one possible completion exists they are displayed
in the minibuffer and the longest common part is retained for you to add
to. The minibuffer is an editable buffer line.
Shell expansion is handled and leading ".." dirs are taken relative to
the $PWD environment variable.
-------------------------------------------------------------------------------
=>                MACRO functions and user variables
eos-chars <string of characters>
    This defines which characters to treat as end of sentence ones so
    that they have an extra space appended when justifying paragraphs.
    The default is none.

char-replace
    Allows you to define the on-screen representation of characters -
    useful for those oddities that display incorrectly in your terminal
    emulator.
    char-replace reset
        resets everything to no replace, replace-char 0xFFFD
    char-replace repchar U+xxxx
        sets the replace-char to U+xxxx
    char-replace U+xxxx | U+xxxx-U+xxxx
        sets the given character (range) to be replaced

store-procedure <proc-name>
    Store a user-defined set of macro commands with the given name
    (which can be a maximum of 14 characters in length).

buffer-to-key <proc-name>   <key-spec>
    Bind the user-defined procedure <proc-name> to the given key.

store-pttable <ptt-name>
    from1  to1
    from2  to2
    ...
!endm
    Define a phonetic translation table.  When this is switched on any
    typing that results in the completion of from1 (from2, ...) will
    result in that text being replaced with to1 (to2, ...).

    The tables can contain these commands:
        caseset-on          [which is the default setting]
        caseset-capinit1
        caseset-capinitall
        caseset-lowinit1
        caseset-lowinitall
        caseset-off
    Each applies to all following replacement rules until the next
    caseset-* command or the end of the table is reached,
    For caseset-off the replaced text is treated verbatim and it will do
    a verbatim replacement on a match.
    For the other cases the replaced text is checked case-insensitively.
    For caseset-on it will force upper-case of the replacement on a
    match if the first character in the replaced string is uppercase.
    For caseset-cap* it will uppercase the first character of the string
    (capinit1) or all words (capinitall).  The caseset-low* are similar,
    but force lowercase if the first character of the replaced string is
    lowercase.

    They may also contain:
        display-code XX

    where XX is a 2-character code to display in the mode line when it
    is on.  It is preceded by "P-" and defaults to the first two
    characters of the table name.

toggle-ptmode
    This turns pttable usage on and off.  Normally it just toggles the
    current state, but a positive argument will force it on and a
    negative one off. You must have a pttable defined.
    The ptmode state is per-buffer, but which pttable is active (if you
    have more then one defined) is global - so the same table applies to
    all buffers with the ptmode state on.

set-pttable <ptt-name>
    Make <ptt-name> the currently-active pttable.

%list-indent-text
    This is a user variable that is used by the numberlist-region macro
    to determine that label used on the first line of a paragraph (and
    hence defines the indent for the rest of the paragraph).
    It is a printf format string that may contain AT MOST one numeric
    field descriptor.
    The default setting in uemacs.rc is " %2d. ".
