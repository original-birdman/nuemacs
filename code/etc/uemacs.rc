;
;       uemacs.rc:      Standard micro Startup program
;                       for MicroEMACS 4.1GGR and above
;                       GGR version
;                       Last Update: 12 July 2017
;
set $discmd FALSE
write-message "[Setting up....]"
;
2 ggr-style         ; Enable ggr-style
;
; There are some system variables of use (see eval.c and evar.h).
;
; $tab lets you set a tab to 4 or 8 chars
; $overlap sets the number of lines to overlap on scrolling to a new page.
; The default (overlap == 0) is 1/3rd of the screen!
; $jump is how many lines to scroll on prev-line at the top of a screen
; or next-line at the bottom (default == 1).
;
set $overlap 2          ; What it used to be
;

;
; Define macro procedures. Has to be done before we can bind them to a key.
; NOTE: that the maximum length of any store-procedure/buffer-to-key name
; is 14 characters.
;

; Procedure run when a new file is opened
;
store-procedure file-hooks
    set %rctmp &sin $cfname "."
    !if &equ %rctmp 0
        !return
    !endif
    set %rctmp &mid $cfname &add %rctmp 1 5
    set %rctmp &lower %rctmp
    !if &or &seq %rctmp "c" &or &seq %rctmp "cc" &or &seq %rctmp "h" &or &seq %rctmp "pl"
        add-mode "cmode"
        delete-mode "wrap"
    !else
        !if &or &seq %rctmp "ftn" &or &seq %rctmp "f77" &or &seq %rctmp "for" &or &seq %rctmp "cpl" &or &seq %rctmp "spl" &or &seq %rctmp "rc" &or &seq %rctmp "cmd" &seq %rctmp "fex"
            delete-mode "wrap"
        !else
                !if &seq %rctmp "asave"
                    add-mode "asave"
                !else
                    !if &seq %rctmp "com"
                        delete-mode "wrap"
                    !endif
                !endif
        !endif
    !endif
!endm
;
; Centre the current text within $fillcol columns
;
store-procedure centre-line
        beginning-of-line
        !force white-delete
        end-of-line
        set %rctmp $curcol
        beginning-of-line
        !if &greater $fillcol %rctmp
                &div &sub $fillcol %rctmp 2 insert-space
                beginning-of-line
        !else
                write-message "[Line too long to centre]"
        !endif
!endm
;
; Unset the Default replace string (which is otherwise remembered
; between replacements).
;
store-procedure rm-dflt-repl
    set $replace ""
    write-message "[Default replace string set null]"
!endm
;
; Run the buffer through an external spell checker
;
store-procedure spell-check not_mb
    set %extras @"<return> or any special SPELL options: "
    !if &seq %extras "ERROR"
        write-message "[Aborted]"
        !return
    !endif
    write-message "[Pushing buffer out to SPELL..]~n~r"
    set %savefile $cfname
    write-file "Temp.spell"
    write-message "~n[Starting spelling checker..]  ~n~r"
    !force shell-command &cat "culspell Temp.spell " %extras
    !if &seq $status TRUE
      write-message "[Pulling (corrected) buffer back in..]~n~r"
      read-file "Temp.spell"
      write-message "~n[Tidying up temporary files..]"
;      set %crunch FALSE
;    !else
;      set %crunch TRUE
    !endif
    set $discmd FALSE
    2 shell-command "rm Temp.spell"
    set $discmd TRUE
    set $cfname %savefile
;   must force buffer to be modified
    insert-string "."
    delete-previous-character
!endm
;
set %lindef 0
set %rindef 0
; set %spc "                                                                  "

;
; left-and-right-justify text within a $fillcol width
;
store-procedure lr-justify not_mb   ; Left and right justify paragraph
  set %oldfill $fillcol
  set %left @&cat &cat "Left indent [" %lindef "]: "
  !if &seq %left "ERROR"
    write-message "[Aborted]"
    !return
  !endif
  !if &sequ %left ""      ; If <null>.....
    set %left %lindef     ; ....accept default
  !else
    !if &and &not &seq %left "0" &not &greater %left 0        ; is it a number?
        write-message "[Not a valid indent!]"
        !return
    !endif
    set %lindef %left     ; Else set default to new value.
  !endif
  set %right @&cat &cat "Right indent [" %rindef "]: "
  !if &seq %right "ERROR"
    write-message "[Aborted]"
    !return
  !endif
  !if &sequ %right ""
    set %right %rindef
  !else
    !if &and &not &seq %right "0" &not &greater %right 0 ; is it a number?
        write-message "[Not a valid indent!]"
        !return
    !endif
    set %rindef %right
  !endif
  write-message "[Filling..]"
  set %indent &add %left %right         ; Add together the L&R indent values
  set $fillcol &sub %oldfill %indent    ; ...and set $fillcol to this value.
  end-of-line           ; make sure point is not at the beginning of paragraph
  previous-paragraph    ; .....and go to beginning of paragraph
  beginning-of-line     ; .....column 0
;
  !if &or &equ $curchar 32 &equ $curchar 9  ; Space or tab?
    !force white-delete                     ; If so, delete it.
  !endif
  -1 fill-paragraph                     ; L&R justify paragraph
  set $fillcol %oldfill                 ; Re-set $fillcol
  set %endlin &add $curline
  previous-paragraph
;
  beginning-of-line
  !while &less $curline %endlin         ; front-pad filled lines
    %left insert-space
    next-line
  !endwhile
  next-word                             ; onto next para
  beginning-of-line
  !endif
;
  clear-message-line
!endm
;
; Toggle local/global modes
;
store-procedure _mytoggle-mode
    write-message &cat &cat "Toggle " %type-mode " mode (FHWCPEVOMYAQD): "
    set %report " "
    set %modesel &upper &gtkey
    !if &or &seq %modesel "" &seq %modesel "~n"
        write-message "[Aborted]"
        !finish
    !endif
; F and H are special...and only global
    !if &seq %modesel "F"
        !if $autodos
            set %how off
        !else
            set %how on
        !endif
        set %report "(GLOBAL) auto-DOS detect toggled "
        set $autodos &not $autodos
        !goto report
    !endif
    !if &seq %modesel "H"
        !if $hscroll
            set %how off
        !else
            set %how on
        !endif
        set %report "(GLOBAL) horizontal scrolling toggled "
        set $hscroll &not $hscroll
        !goto report
    !endif
;
    !if &seq %modesel "W"
        set %bit 1
        set %what "WRAP"
        !goto doit
    !endif
    !if &seq %modesel "C"
        set %bit 2
        set %what "CMODE"
        !goto doit
    !endif
    !if &seq %modesel "P"
        set %bit 4
        set %what "PHON"
        !goto doit
    !endif
    !if &seq %modesel "E"
        set %bit 8
        set %what "EXACT"
        !goto doit
    !endif
    !if &seq %modesel "V"
        set %bit 16
        set %what "VIEW"
        !goto doit
    !endif
    !if &seq %modesel "O"
        set %bit 32
        set %what "OVER"
        !goto doit
    !endif
    !if &seq %modesel "M"
        set %bit 64
        set %what "MAGIC"
        !goto doit
    !endif
    !if &seq %modesel "Y"
        set %bit 128
        set %what "CRYPT"
        !goto doit
    !endif
    !if &seq %modesel "A"
        set %bit 256
        set %what "ASAVE"
        !goto doit
    !endif
    !if &seq %modesel "Q"
        set %bit 512
        set %what "EQUIV"
        !goto doit
    !endif
    !if &seq %modesel "D"
        set %bit 1024
        set %what "DOS"
        !goto doit
    !endif
    write-message "Unknown mode"
    !finish
;
*doit
    set %report &cat %type-mode &cat " " &cat %what " mode toggled "
    !if &band %test-mode %bit
        set %mfunc %del-func
        set %how off
    !else
        set %mfunc %add-func
        set %how on
    !endif
    %mfunc %what
*report
    write-message &cat %report %how
    !finish
!endm

store-procedure toggle-lmode            ; toggle local mode
    set %test-mode $cmode
    set %type-mode local
    set %add-func add-mode
    set %del-func delete-mode
    execute-procedure _mytoggle-mode
!endm

store-procedure toggle-gmode            ; toggle global mode
    set %test-mode $gmode
    set %type-mode global
    set %add-func add-global-mode
    set %del-func delete-global-mode
    execute-procedure _mytoggle-mode
!endm
;
; delete spaces right until next non-space char
;
store-procedure del-sp-right
    !while &or &equal $curchar 32 &equal $curchar 9
        delete-next-character
    !endwhile
!endm

; Take text between point and any preceding $ as an environment variable
; name and replace that $text with the variable's contents
;
store-procedure expand-envvar
    set-mark
    !while TRUE
        !if &equal $curchar 36  ; i.e. "$"
            !break
        !endif
        !if &equal $curcol 0
            write-message "No envar found"
            exchange-point-and-mark
            !finish
        !endif
        backward-character
    !endwhile
; Need to get the text we've found - which is the name of the envvar
; Remove the $varname text, then look-up that (minus the $) as an envvar
    kill-region
    insert-string &env &mid $kill 2 &len $kill
!endm

;
; Overwrite some standard bindings - for historic GGR feel.
; Binding names are from name_bind in names.c
;
bind-to-key reexecute                   ^C
bind-to-key type-tab                    ^I
bind-to-key replace-string              ^R
bind-to-key previous-line               ^Z
bind-to-key set-mark                    ^@
buffer-to-key del-sp-right              ^\
;
unbind-key                              ^X^A
bind-to-key detab-line                  ^X^D
bind-to-key handle-tab                  ^X^I
;
bind-to-key fill-all-paragraphs         ^X.
bind-to-key numberlist-region           ^X/
bind-to-key narrow-to-region            ^X<
bind-to-key widen-from-region           ^X>
bind-to-key help                        ^X?
bind-to-key insert-file                 ^XI
buffer-to-key centre-line               ^XL
bind-to-key save-file                   ^XS
buffer-to-key toggle-lmode              ^XT
;
buffer-to-key rm-dflt-repl              M-^D
bind-to-key incremental-search          M-^I
buffer-to-key lr-justify                M-^J    ; Previously Esc-J in 3.9e
bind-to-key next-pttable                M-^P
unbind-key                              M-^T
bind-to-key i-shell                     M-^U
bind-to-key execute-file                M-^X
bind-to-key yank-minibuffer             M-^Y
;
; The SP on the following line denotes "space"
bind-to-key leave-one-white             M-SP
buffer-to-key expand-envvar             M-$
bind-to-key query-replace-string        M-%
bind-to-key quoted-count                M-'
bind-to-key makelist-region             M-/
buffer-to-key spell-check               M-=
bind-to-key describe-key                M-?

bind-to-key search-reverse              M-R
buffer-to-key toggle-gmode              M-T
bind-to-key fill-paragraph              M-Q
bind-to-key white-delete                M-\
;
bind-to-key previous-line               FNA
bind-to-key next-line                   FNB
bind-to-key forward-character           FNC
bind-to-key backward-character          FND
bind-to-key kill-to-end-of-line         FNQ
bind-to-key previous-word               FNP
bind-to-key next-word                   FNR
bind-to-key set-mark                    FNH
;

4 handle-tab
add-global-mode "wrap"
add-global-mode "exact"

; Our end-of-sentence chars
eos-chars ".!?"

; Replacement character users
char-replace "U+0800 U+10000"

; Single UTF-16 surrogates
char-replace "U+D800 U+DB7F-U+DB80 U+DBFF-U+DC00 U+DF80 U+DFFF"

; Testing for new keyboard macro code
buffer-to-key /kbd_macro    ^XV

; This is the default anyway, but use this as a reminder, and
; an example of how to change it
args-in-reexec ALL

;;;;; showdir userproc ;;;;;
;
; Attempt to enable uemacs to list a directory in a buffer and let you
; browse to files... 
; This doesn't work on Android, as pipe-command fails - probably
; as /bin/sh isn't there and I build it on a Raspberry Pi, whch expects it.
; I'm not worried about it....just don't enabel it there.
;

!if &not &sin $progname "android"

; We have to set how many tokens to skip in the output line of the
; /bin/ls command (defined below) to get to the start of the entryname.
;
 set $showdir_tokskip 8

; Define the user procedure to fill a buffer with ls lines
;
 store-procedure showdir

; Get the full pathname...may be supplied internally by C-code (&arg)
;
    set %udir &arg "Dir: "

; Have to handle getting "", ".", "./xxx" or a relative path, as we
; need the full pathname to open entries after changing directory
;
    !if &or &seq "" %udir &seq "." %udir 
        set %udir &env PWD
    !endif
    !if &seq "./" &lef %udir 2
        set %udir &cat &env PWD &rig %udir 2
    !endif
    !if &not &seq "/" &lef %udir 1
        set %udir &cat &env PWD &cat "/" %udir
    !endif
    set %escudir &escape %udir

; List the directory in a buffer (.ue_command - PIPEFILE in spawn.c)
; Build up the ls command, and post-handling with awk/sort/etc...
;
    set %ucmd &cat "/bin/ls -lLh " %escudir
    set %ucmd &cat %ucmd "| awk 'NR == 1 && $1 == ~"total~" {next;} {print;}' | sort -k 1,1.1r -k9"
    pipe-command %ucmd

; Make that window the only window
;
    delete-other-windows

; Rename it to something else - make sure anything already there is
; removed first
; NOTE: that we know it isn't being displayed, as we've just set the 
;       pipecmd window (.ue_command - PIPEFILE in spawn.c) to be the
;       only displayed window.
;       This //directory name must agree with the name used in main.c
;       for its showdir handling.
;
    delete-buffer //directory
    name-buffer //directory
    change-file-name %udir
    add-mode view       ; Turn it back on...
    delete-mode wrap    ; Turn this off...
 !endm
!endif

;
set $discmd TRUE
