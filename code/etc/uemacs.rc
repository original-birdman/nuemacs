;
;       uemacs.rc:      Standard micro Startup program
;                       for MicroEMACS 4.1GGR and above
;                       Version - GGR4.163 (requires GGR4.163+)
;                       Last Update: 11 July 2022
;
write-message "[Setting up....]"
set $discmd FALSE
;
2 ggr-style         ; Enable ggr-style
;
; There are some system variables of use (see eval.c and evar.h).
;
; $tab lets you set a tab to 4 or 8 chars
; $overlap sets the number of lines to overlap on scrolling to a new page.
; The default (overlap == 0) is 1/3rd of the screen!
; $jump is how many lines to scroll on prev-line at the top of a screen
; or next-line at the bottom (default == 1).
;
set $overlap 2          ; What it used to be
;

;
; Define macro procedures. Has to be done before we can bind them to a key.
; NOTE: that the maximum length of any store-procedure/buffer-to-key name
; is 14 characters.
;

; Procedure run when a new file is opened
;
store-procedure file-hooks
    set .rctmp &sin $cfname "."
    !if &equ .rctmp 0
        !return
    !endif
    set .rctmp &mid $cfname &add .rctmp 1 5
    set .rctmp &lower .rctmp
    !if &or &seq .rctmp "c" &or &seq .rctmp "cc" &or &seq .rctmp "h" &or &seq .rctmp "pl"
        add-mode "cmode"
        delete-mode "wrap"
    !else
        !if &or &seq .rctmp "ftn" &or &seq .rctmp "f77" &or &seq .rctmp "for" &or &seq .rctmp "cpl" &or &seq .rctmp "spl" &or &seq .rctmp "rc" &or &seq .rctmp "cmd" &seq .rctmp "fex"
            delete-mode "wrap"
        !else
                !if &seq .rctmp "asave"
                    add-mode "asave"
                !else
                    !if &seq .rctmp "com"
                        delete-mode "wrap"
                    !endif
                !endif
        !endif
    !endif
!endm
;
; Centre the current text within $fillcol columns
;
store-procedure centre-line one_pass
    beginning-of-line
    !force white-delete
    end-of-line
    set .rctmp $curcol
    beginning-of-line
    !if &greater $fillcol .rctmp
        &div &sub $fillcol .rctmp 2 insert-space
        beginning-of-line
    !else
        write-message "[Line too long to centre]"
    !endif
!endm
;
; Unset the Default replace string (which is otherwise remembered
; between replacements).
;
store-procedure rm-dflt-repl one_pass
    set $replace ""
    write-message "[Default replace string set null]"
!endm
;
; Run the buffer through an external spell checker
;
store-procedure spell-check not_mb one_pass
    set .extras @"<return> or any special SPELL options: "
    !if &seq .extras "ERROR"
        write-message "[Aborted]"
        !return
    !endif
    write-message "[Pushing buffer out to SPELL..]~n~r"
    set .savefile $cfname
    write-file "Temp.spell"
    write-message "~n[Starting spelling checker..]  ~n~r"
    !force execute-program &cat "culspell Temp.spell " .extras
    !if &seq $status TRUE
        write-message "[Pulling (corrected) buffer back in..]~n~r"
        read-file "Temp.spell"
        write-message "~n[Tidying up temporary files..]"
    !endif
    set $discmd FALSE
    2 shell-command "rm Temp.spell"
    set $discmd TRUE
    set $cfname .savefile
;   must force buffer to be modified
    insert-string "."
    delete-previous-character
!endm
;

; We remember these across calls...
;
set %lindef 0
set %rindef 0

;
; left-and-right-justify text within a $fillcol width
; Not one_pass as a numeric arg repeats for n paras.
; We only prompt for .left and .right on pass1.
;
store-procedure lr-justify not_mb   ; Left and right justify paragraph
  set .oldfill $fillcol
; Only ask for the margins on the first pass on multiple loops
  !if &equ $uproc_lpcount 1
    set .left @&ptf "Left indent [%s]: " %lindef
    !if &seq .left "ERROR"
      write-message "[Aborted]"
      !return
    !endif
    !if &sequ .left ""      ; If <null>.....
      set .left %lindef     ; ....accept default
    !else
      !if &and &not &seq .left "0" &not &greater .left 0        ; is it a number?
          write-message "[Not a valid indent!]"
          !return
      !endif
      set %lindef .left     ; Else set default to new value.
    !endif
    set .right @&ptf "Right indent [%s]: " %rindef
    !if &seq .right "ERROR"
      write-message "[Aborted]"
      !return
    !endif
    !if &sequ .right ""
      set .right %rindef
    !else
      !if &and &not &seq .right "0" &not &greater .right 0 ; is it a number?
          write-message "[Not a valid indent!]"
          !return
      !endif
      set %rindef .right
    !endif
    write-message "[Filling..]"
  !endif
;
  set %indent &add .left .right         ; Add together the L&R indent values
  set $fillcol &sub .oldfill %indent    ; ...and set $fillcol to this value.
  end-of-line           ; make sure point is not at the beginning of paragraph
  previous-paragraph    ; .....and go to beginning of paragraph
  beginning-of-line     ; .....column 0
;
  !if &or &equ $curchar 32 &equ $curchar 9  ; Space or tab?
    !force white-delete                     ; If so, delete it.
  !endif
  -1 fill-paragraph                     ; L&R justify paragraph
  set $fillcol .oldfill                 ; Re-set $fillcol
  set .endlin &add $curline
  previous-paragraph
;
  beginning-of-line
  !while &less $curline .endlin         ; front-pad filled lines
    .left insert-space
    next-line
  !endwhile
  next-word                             ; onto next para
  beginning-of-line
  !endif
;
  clear-message-line
!endm
;
; Toggle local/global modes
;
; This uses %test-mode, %type-mode, %add-func and %del-func
; values set in toggle-lmode or toggle-gmode
;
store-procedure _mytoggle-mode
    write-message &ptf "Toggle %s mode (FHWCPEVOMYAQDR): " %type-mode
    set .report " "
    set .modesel &upper &gtkey
    !if &or &seq .modesel "" &seq .modesel "~n"
        write-message "[Aborted]"
        !finish
    !endif
; F and H are special...and only global
    !if &seq .modesel "F"
        !if $autodos
            set .how off
        !else
            set .how on
        !endif
        set .report "(GLOBAL) auto-DOS detect toggled "
        set $autodos &not $autodos
        !goto report
    !endif
    !if &seq .modesel "H"
        !if $hscroll
            set .how off
        !else
            set .how on
        !endif
        set .report "(GLOBAL) horizontal scrolling toggled "
        set $hscroll &not $hscroll
        !goto report
;
    !endif

; Handle the rest...
    !if &eq 0 &sin "WCPEVOMYAQDR" .modesel
        write-message "Unknown mode"
        !finish
    !endif
    !goto &cat "togl" .modesel
*toglW
    set .bit 0x01
    set .what "WRAP"
    !goto doit
*toglC
    set .bit 0x02
    set .what "CMODE"
    !goto doit
*toglP
    set .bit 0x04
    set .what "PHON"
    !goto doit
*toglE
    set .bit 0x08
    set .what "EXACT"
    !goto doit
*toglV
    set .bit 0x10
    set .what "VIEW"
    !goto doit
*toglO
    set .bit 0x20
    set .what "OVER"
    !goto doit
*toglM
    set .bit 0x40
    set .what "MAGIC"
    !goto doit
*toglY
    set .bit 0x80
    set .what "CRYPT"
    !goto doit
*toglA
    set .bit 0x100
    set .what "ASAVE"
    !goto doit
*toglQ
    set .bit 0x200
    set .what "EQUIV"
    !goto doit
*toglD
    set .bit 0x400
    set .what "DOS"
    !goto doit
*toglR
    set .bit 0x800
    set .what "REPORT"
    !goto doit
;
*doit
    set .report &ptf "%s %s mode toggled " %type-mode .what
    !if &band %test-mode .bit
        set .mfunc %del-func
        set .how off
    !else
        set .mfunc %add-func
        set .how on
    !endif
    .mfunc .what
*report
    delete-var %test-mode
    delete-var %type-mode
    delete-var %add-func
    delete-var %del-func
    write-message &cat .report .how
!endm

store-procedure toggle-lmode one_pass   ; toggle local mode
    set %test-mode $cmode
    set %type-mode local
    set %add-func add-mode
    set %del-func delete-mode
    execute-procedure _mytoggle-mode
!endm

store-procedure toggle-gmode one_pass   ; toggle global mode
    set %test-mode $gmode
    set %type-mode global
    set %add-func add-global-mode
    set %del-func delete-global-mode
    execute-procedure _mytoggle-mode
!endm
;
; delete spaces right until next non-space char
;
store-procedure del-sp-right one_pass
    !while &or &equal $curchar 32 &equal $curchar 9
        delete-next-character
    !endwhile
!endm

; Take text between point and any preceding $ as an environment variable
; name and replace that $text with the variable's contents
;
store-procedure expand-envvar
    set-mark
    !while TRUE
        !if &equal $curchar 36  ; i.e. "$"
            !break
        !endif
        !if &equal $curcol 0
            write-message "No envvar found"
            exchange-point-and-mark
            !finish
        !endif
        backward-character
    !endwhile
; Need to get the text we've found - which is the name of the envvar
; Remove the $varname text, then look-up that (minus the $) as an envvar
    kill-region
    insert-string &env &mid $kill 2 &len $kill
!endm

; Toggle ggr_opts settings
;
store-procedure toggle-ggr-opts
    write-message &ptf "Toggle ggr-opt (Twiddle, Forwword, fullWrap):"
    set .report " "
    set .optsel &upper &gtkey
    !if &or &seq .optsel "^G" &seq .optsel "~n"
        write-message "[Aborted]^G"
        !finish
    !endif
    !if &eq 0 &sin "WCPEVOMYAQDR" .optsel
        write-message "Unknown mode^G"
        !finish
    !endif
    !goto &cat "togl" .optsel
*toglT
    set .bit 0x01
    set .what "Twiddle"
    !goto doit
*toglF
    set .bit 0x02
    set .what "Forwword"
    !goto doit
*toglW
    set .bit 0x04
    set .what "FullWrap"
    !goto doit
*doit
    set .report &ptf "GGR %s mode toggled " .what
    !if &band $ggr_opts .bit
        set .how off
    !else
        set .how on
    !endif
    set $ggr_opts &bxor $ggr_opts .bit
*report
    write-message &cat .report .how
!endm

;
; Overwrite some standard bindings - for historic GGR feel.
; Binding names are from name_bind in names.c
;
bind-to-key reexecute                   ^C
bind-to-key type-tab                    ^I
bind-to-key replace-string              ^R
bind-to-key previous-line               ^Z
bind-to-key set-mark                    ^@
buffer-to-key del-sp-right              ^\
;
; Move detab from ^X^A to ^X^D
unbind-key                              ^X^A
bind-to-key detab-line                  ^X^D
bind-to-key handle-tab                  ^X^I
;
bind-to-key fill-all-paragraphs         ^X.
bind-to-key numberlist-region           ^X/
bind-to-key narrow-to-region            ^X<
bind-to-key widen-from-region           ^X>
bind-to-key help                        ^X?
buffer-to-key toggle-ggr-opts           ^XG
bind-to-key insert-file                 ^XI
buffer-to-key centre-line               ^XL
bind-to-key save-file                   ^XS
buffer-to-key toggle-lmode              ^XT
;
buffer-to-key rm-dflt-repl              M-^D
bind-to-key incremental-search          M-^I
buffer-to-key lr-justify                M-^J    ; Previously Esc-J in 3.9e
bind-to-key next-pttable                M-^P
bind-to-key i-shell                     M-^U
bind-to-key execute-file                M-^X
bind-to-key yank-minibuffer             M-^Y
;
; The SP on the following line denotes "space"
bind-to-key leave-one-white             M-SP
buffer-to-key expand-envvar             M-$
bind-to-key query-replace-string        M-%
bind-to-key quoted-count                M-'
bind-to-key makelist-region             M-/
buffer-to-key spell-check               M-=
bind-to-key describe-key                M-?

bind-to-key search-reverse              M-R
buffer-to-key toggle-gmode              M-T
bind-to-key fill-paragraph              M-Q
bind-to-key white-delete                M-\

; KeyPad and AppPad keys
;
bind-to-key previous-line               FNA     ; Up Arrow
bind-to-key next-line                   FNB     ; Down Arrow
bind-to-key forward-character           FNC     ; Right Arrow
bind-to-key backward-character          FND     ; Left Arrow
bind-to-key previous-page               FN5     ; Page Up
bind-to-key next-page                   FN6     ; Page Down
bind-to-key yank                        FN2     ; Insert
bind-to-key kill-region                 FN3     ; Del/Delete
;

; Function key binding - a choice of ways for some.
; So we set both ways as the " not needed" key won't
; be sent by any other key.
;
; KDE Linux console (or Solaris)
;
bind-to-key beginning-of-file           FN1     ; Home
bind-to-key end-of-file                 FN4     ; End
;
bind-to-key help                        FNa     ; F1
bind-to-key describe-bindings           FNb     ; F2
bind-to-key scroll-next-up              FNc     ; F3
bind-to-key scroll-next-down            FNd     ; F4

;
; Xfree4/gnome
;
bind-to-key beginning-of-file           FNH     ; Home
bind-to-key end-of-file                 FNF     ; End
;
bind-to-key help                        FNP     ; F1
bind-to-key describe-bindings           FNQ     ; F2
bind-to-key scroll-next-up              FNR     ; F3
bind-to-key scroll-next-down            FNS     ; F4
;
; Common function keys...
;
bind-to-key describe-key                FNe     ; F5
bind-to-key kill-paragraph              FNf     ; F6
bind-to-key yank-replace                FNg     ; F7
bind-to-key yank-minibuffer             FNh     ; F8
bind-to-key makelist-region             FNi     ; F9
bind-to-key numberlist-region           FNj     : F10
2 bind-to-key count-words               FNl     ; F12

;
; End key mappings
;

4 handle-tab
add-global-mode "wrap"
add-global-mode "exact"

; Our end-of-sentence chars
eos-chars ".!?"

; Replacement character users
char-replace U+0800

; Single UTF-16 surrogates
char-replace "U+D800 U+DB7F-U+DB80 U+DBFF-U+DC00 U+DF80 U+DFFF"

; Testing for new keyboard macro code
buffer-to-key /kbd_macro    ^XV

; This is the default anyway, but use this as a reminder, and
; an example of how to change it
args-in-reexec ALL

;;;;; showdir userproc ;;;;;
;   Added at GGR4.145 - earlier versions will not support it.
;
; Enable uemacs to list a directory in a buffer and let you browse
; to files and other dirs...
; This doesn't work on my old Moto4g Android, as pipe-command fails -
; probably as /bin/sh isn't there and I build it on a Raspberry Pi,
; which expects it.
; I'm not worried about it....just don't enable it there.
; But it DOES work on my Moto8g when built in a qemu Debian Buster
; aarch64 set-up!! So we may as well set things up for it...
;

!if &not &sin $progname "moto4g"

; We have to set how many tokens execute() must skip in the output line
; of the /bin/ls command (defined below) to get to the start of the
; entryname.
; The moto8g one is only 7 as it outputs dates with no spaces.
; (Its sort also seems to not honour the -s option to sort, but I'll
; just have to live with that...).
; These are set here, rather than in teh first call set-up block, so
; that, if necessary(?), a user can change the value before the first
; call to showdir.
;
    !if &sin $progname "moto8g"
        set $showdir_tokskip 7
    !else
        set $showdir_tokskip 8
    !endif

; -+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-
 store-procedure showdir

; Get the full pathname...expected to be supplied internally by C-code
; (via userproc_arg in @"...) and that will have been expanded to a
; full-pathname.
; If the user calls this "manually" (Esc-x execute-procedure showdir)
; and gets prompted we will *still* expand it.
;
; We must set $uproc_opts just before getting .udir as it is reset on fetch.
; This sets UPROC_FIXUP - to expand any user reply to a full pathname
; (If the userproc_arg arg was set internally it will have already been
; expanded internally)
;
    set $uproc_opts 0x01
    set .udir @"Dir: "

; We *expect* to be given a full pathname, so check that first
; This should not fail!
;
    !if &not &seq "/" &lef .udir 1
        write-message &cat "Not an absolute path: " .udir
        !return
    !endif

; If this is the first call, set things up...
;
    set .calls &add .calls 1
    !if &equ .calls 1           ; First call...

; For the following 3 we set the ls flag as the value
;
        !if &equ &sin &upp $showdir_opts "T" 0
             set .showdir_sort_type ""  ; Set the default...Ascii (not Time)
        !else
             set .showdir_sort_type "t" ; Set Time
        !endif
        !if &equ &sin &upp $showdir_opts "R" 0
             set .showdir_sort_drct ""  ; Set the default...forwards
        !else
             set .showdir_sort_drct "r" ; Set reverse
        !endif
        !if &equ &sin &upp $showdir_opts "H" 0
             set .showdir_sort_hide ""  ; Set the default...ignore hidden
        !else
             set .showdir_sort_hide "A" ; Set show hidden
        !endif
; This sets a sort flag
;
        !if &equ &sin &upp $showdir_opts "F" 0
             set .showdir_sort_dirf "r" ; Set the default...dirs before files
        !else
             set .showdir_sort_dirf ""  ; Set files before dirs
        !endif
; This just sets a testable value
;
        !if &equ &sin &upp $showdir_opts "M" 0
             set .showdir_sort_mixd ""  ; Set the default...separate types
        !else
             set .showdir_sort_mixd "M" ; Set mixed-display mode (dirf ignored)
        !endif

; NOW we define the user procedure to fill a buffer with ls lines
;

        set .awk_cmd "| awk 'NR == 1 && $1 == ~"total~" {next;} /^l\?\?\?\?\?\?\?\?\?/ {next;} {print;}'"

    !endif      ; End of first call set-up.

; shell-escape this so we can interpolate it into a command line
;
    set .escudir &escape .udir

; List the directory in a buffer (.ue_command - PIPEFILE in spawn.c)
; Build up the ls command, and post-handling with awk/sort/etc...
; We'll force literal filenames with the QUOTING_STYLE environment variable,
; in case ls doesn't have the --quoting-style option...
; We could add a 2>/dev/null to the ls command to remove "Not found"
; messages from dangling symlinks - but they don't affect the uemacs display
; (they end up in the "other" window and show up on exit).
;
; Which order we use depends on the key used to get us here.
; NOTE!! The .lsopt requires the trailing space!!
;
; First - did we get a specific sort request? If so, use it.
; Otherwise, use the previous sort used.
; Always remember the method used.
;
    set .lkey &upp &chr $lastkey
    !if &seq .lkey H            ; Toggle hide option
        !if &seq .showdir_sort_hide "A" ; Set the ls flag directly
            set .showdir_sort_hide ""
        !else
            set .showdir_sort_hide "A"
        !endif
;
    !endif
    !if &seq .lkey F            ; Toggle files/dirs order
        !if &seq .showdir_sort_dirf "r" ; Set the sort flag directly
            set .showdir_sort_dirf ""
        !else
            set .showdir_sort_dirf "r"
        !endif
;
    !endif
    !if &seq .lkey M            ; Toggle mixed/type-separated
        !if &seq .showdir_sort_mixd "M" ; Set a flag
            set .showdir_sort_mixd ""
        !else
            set .showdir_sort_mixd "M"
        !endif
;
    !endif
    !if &seq .lkey A            ; Set/toggle ASCII option
        !if &seq .showdir_sort_type ""  ; In ASCII - toggle direction
            !if &seq .showdir_sort_drct "r"
                set .showdir_sort_drct ""
            !else
                set .showdir_sort_drct "r"
            !endif
        !else
            set .showdir_sort_type ""   ; Switch to ASCII
        !endif
;
    !endif
    !if &seq .lkey T            ; Set/toggle TIME option
        !if &seq .showdir_sort_type "t" ; In TIME - toggle direction
            !if &seq .showdir_sort_drct "r"
                set .showdir_sort_drct ""
            !else
                set .showdir_sort_drct "r"
            !endif
        !else
            set .showdir_sort_type "t"  ; Switch to TIME
        !endif
    !endif

; All other keys (D U O R) re-use the current settings...

; Now build up the ls options flags
;
    set .lsopt &ptf "-lLh%s%s%s " .showdir_sort_hide .showdir_sort_type .showdir_sort_drct
    set .ucmd &cat "QUOTING_STYLE=literal /bin/ls 2>/dev/null " &cat .lsopt &cat .escudir

; The initial list is sent to sort to move all dirs to the top.
; Actually we just do a stable sort on char1, so get blocks of:
;   blockdevs, chardevs, dirs, pipes, sockets, files.
; The awk filters out the any total on line1, and also any
; dangling links (which start l????????).
;
    !if &seq .showdir_sort_mixd ""  ; We want type sorting
        set .sdsort &cat "| sort -s -k 1.1,1.1" .showdir_sort_dirf
    !else
        set .sdsort ""
    !endif
    set .ucmd &ptf "%s %s %s" .ucmd .awk_cmd .sdsort
    pipe-command .ucmd

; Make that window the only window
;
    delete-other-windows

; Rename it to something else - make sure anything already there is
; removed first
; NOTE: that we know it isn't being displayed, as we've just set the
;       pipecmd window (.ue_command - PIPEBUF in spawn.c) to be the
;       only displayed window.
;       This //directory name must agree with the name used in main.c
;       for its showdir handling.
;
    delete-buffer //directory
    name-buffer //directory
    change-file-name .udir
    add-mode view       ; Turn it back on...
    delete-mode wrap    ; Turn this off...

    !if &seq .showdir_sort_type "t"
        set .tmess "time"
    !else
        set .tmess "name"
    !endif
    !if &seq .showdir_sort_drct "r"
        set .rmess " reversed"
    !else
        set .rmess ""
    !endif
    !if &seq .showdir_sort_hide "A"
        set .hmess "with hidden files,"
    !else
        set .hmess "no hidden files,"
    !endif
    !if &seq .showdir_sort_mixd ""
        !if &seq .showdir_sort_dirf ""
            set .xmess "files before dirs"
        !else
            set .xmess "dirs before files"
        !endif
    !else
        set .xmess "mixed types"
    !endif


; Need to update the current screen before displaying the sort method.
;
    update-screen
    write-message &ptf "Sorted by %s%s, %s %s" .tmess .rmess .hmess .xmess

 !endm
!endif

;
set $discmd TRUE
